name: CHR Pipeline

on:
  workflow_dispatch:
    inputs:
      step:
        description: 'Pipeline step to run'
        type: choice
        required: true
        options:
          - all
          - stamdata
          - herds
          - herd_details
          - diko
          - ejendom
          - vetstat
        default: 'all'
      test_mode:
        description: 'Run in test mode'
        type: boolean
        default: false
      max_herds:
        description: 'Maximum number of herds to process'
        type: string
        default: ''
      species_codes:
        description: 'Comma-separated list of species codes'
        type: string
        default: ''
      log_level:
        description: 'Logging level'
        type: choice
        required: true
        options:
          - WARNING
          - INFO
          - DEBUG
          - ERROR
        default: 'WARNING'
      show_progress:
        description: 'Show progress information'
        type: boolean
        default: true

jobs:
  run-pipeline:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Install dependencies
      run: |
        cd backend/pipelines/chr_pipeline
        uv pip install --system -e .

    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v2'

    - name: Set up environment variables
      env:
        GCS_BUCKET: landbrugsdata-raw-data
        FVM_USERNAME: ${{ secrets.FVM_USERNAME }}
        FVM_PASSWORD: ${{ secrets.FVM_PASSWORD }}
        VETSTAT_CERTIFICATE: ${{ secrets.VETSTAT_CERTIFICATE }}
        VETSTAT_CERTIFICATE_PASSWORD: ${{ secrets.VETSTAT_CERTIFICATE_PASSWORD }}
        GOOGLE_CLOUD_PROJECT: ${{ secrets.GOOGLE_CLOUD_PROJECT }}
      run: |
        cd backend/pipelines/chr_pipeline
        echo "GCS_BUCKET=$GCS_BUCKET" >> .env
        echo "FVM_USERNAME=$FVM_USERNAME" >> .env
        echo "FVM_PASSWORD=$FVM_PASSWORD" >> .env
        echo "VETSTAT_CERTIFICATE=$VETSTAT_CERTIFICATE" >> .env
        echo "VETSTAT_CERTIFICATE_PASSWORD=$VETSTAT_CERTIFICATE_PASSWORD" >> .env
        echo "GOOGLE_CLOUD_PROJECT=$GOOGLE_CLOUD_PROJECT" >> .env

    - name: Run Pipeline Step
      working-directory: backend/pipelines/chr_pipeline
      run: |
        # Build base command with common arguments
        CMD="python main.py --log-level ${{ inputs.log_level }}"
        
        # Add progress flag if enabled
        if [ "${{ inputs.show_progress }}" = "true" ]; then
          CMD="$CMD --progress"
        fi
        
        # Add test mode arguments if enabled
        if [ "${{ inputs.test_mode }}" = "true" ]; then
          if [ -n "${{ inputs.species_codes }}" ]; then
            CMD="$CMD --test-species-codes ${{ inputs.species_codes }}"
          else
            CMD="$CMD --test-species-codes 15"
          fi
          
          if [ -n "${{ inputs.max_herds }}" ]; then
            CMD="$CMD --limit-total-herds ${{ inputs.max_herds }}"
          else
            CMD="$CMD --limit-total-herds 100"
          fi
        fi
        
        # Add step-specific argument
        case "${{ inputs.step }}" in
          "all")
            CMD="$CMD --steps all"
            ;;
          "stamdata")
            CMD="$CMD --steps stamdata"
            ;;
          "herds")
            CMD="$CMD --steps herds"
            ;;
          "herd_details")
            CMD="$CMD --steps herd_details"
            ;;
          "diko")
            CMD="$CMD --steps diko"
            ;;
          "ejendom")
            CMD="$CMD --steps ejendom"
            ;;
          "vetstat")
            CMD="$CMD --steps vetstat"
            ;;
        esac
        
        echo "Running command: $CMD"
        $CMD

    - name: Handle pipeline failure
      if: failure()
      run: |
        echo "Pipeline step '${{ inputs.step }}' failed. Please check the logs above for details."
        exit 1