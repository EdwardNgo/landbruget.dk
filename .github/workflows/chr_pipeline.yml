name: CHR Pipeline

on:
  schedule:
    - cron: '0 2 * * 1'  # Every Monday at 2 AM UTC
  workflow_dispatch:
    inputs:
      step:
        description: 'Pipeline step to run'
        type: choice
        required: true
        options:
          - all
          - stamdata
          - herds
          - herd_details
          - diko
          - animal_movements
          - ejendom
          - vetstat
        default: 'all'
      start_date:
        description: 'Start date (YYYY-MM-DD)'
        type: string
        required: false
        default: ''
      end_date:
        description: 'End date (YYYY-MM-DD)'
        type: string
        required: false
        default: ''
      test_mode:
        description: 'Run in test mode'
        type: boolean
        default: false
      max_herds:
        description: 'Maximum number of herds to process'
        type: string
        default: ''
      species_codes:
        description: 'Comma-separated list of species codes'
        type: string
        default: ''
      log_level:
        description: 'Logging level'
        type: choice
        required: true
        options:
          - WARNING
          - INFO
          - DEBUG
          - ERROR
        default: 'WARNING'
      show_progress:
        description: 'Show progress information'
        type: boolean
        default: true
      limit_herds_per_species:
        description: 'Limit number of herds processed per species'
        type: string
        default: ''

jobs:
  run-pipeline:
    runs-on: ubuntu-latest
    
    # Add permissions for GCS access
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Install dependencies
      run: |
        cd backend/pipelines/chr_pipeline
        # Use compatible binary wheels for lxml==5.2.1 and xmlsec==1.3.14
        # These versions are compatible and resolve the version mismatch issue
        # See: https://github.com/xmlsec/python-xmlsec/issues/316
        uv pip install --system -e .

    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v2'

    - name: Set up environment variables
      env:
        GCS_BUCKET: ${{ secrets.GCS_BUCKET }}
        FVM_USERNAME: ${{ secrets.FVM_USERNAME }}
        FVM_PASSWORD: ${{ secrets.FVM_PASSWORD }}
        VETSTAT_CERTIFICATE: ${{ secrets.VETSTAT_CERTIFICATE }}
        VETSTAT_CERTIFICATE_PASSWORD: ${{ secrets.VETSTAT_CERTIFICATE_PASSWORD }}
        GOOGLE_CLOUD_PROJECT: ${{ secrets.GOOGLE_CLOUD_PROJECT }}
      run: |
        cd backend/pipelines/chr_pipeline
        echo "GCS_BUCKET=$GCS_BUCKET" >> .env
        echo "FVM_USERNAME=$FVM_USERNAME" >> .env
        echo "FVM_PASSWORD=$FVM_PASSWORD" >> .env
        echo "VETSTAT_CERTIFICATE=$VETSTAT_CERTIFICATE" >> .env
        echo "VETSTAT_CERTIFICATE_PASSWORD=$VETSTAT_CERTIFICATE_PASSWORD" >> .env
        echo "GOOGLE_CLOUD_PROJECT=$GOOGLE_CLOUD_PROJECT" >> .env
        
        # Create data directories
        mkdir -p /tmp/data/bronze/chr
        mkdir -p /tmp/data/silver/chr

    - name: Run Pipeline Step
      working-directory: backend/pipelines/chr_pipeline
      env:
        GCS_BUCKET: ${{ secrets.GCS_BUCKET }}
        GOOGLE_CLOUD_PROJECT: ${{ secrets.GOOGLE_CLOUD_PROJECT }}
      run: |
        # Set defaults for scheduled runs (when inputs are not available)
        STEP="${{ inputs.step || 'all' }}"
        LOG_LEVEL="${{ inputs.log_level || 'WARNING' }}"
        SHOW_PROGRESS="${{ inputs.show_progress || 'true' }}"
        
        # Set default 3-year date range specifically for animal_movements step
        if [[ ("$STEP" == "animal_movements" || "$STEP" == "all") && -z "${{ inputs.start_date }}" && -z "${{ inputs.end_date }}" ]]; then
          # Calculate 3-year range: from 3 years ago to today
          START_DATE=$(date -d "3 years ago" +%Y-01-01)
          END_DATE=$(date +%Y-%m-%d)
          echo "Auto-setting 3-year date range for animal_movements: $START_DATE to $END_DATE"
        fi
        
        CMD="python -m main --steps $STEP --log-level $LOG_LEVEL"
        if [[ "$SHOW_PROGRESS" == "true" ]]; then
          CMD="$CMD --progress"
        fi
        if [[ -n "${{ inputs.start_date }}" ]]; then
          CMD="$CMD --start-date ${{ inputs.start_date }}"
        elif [[ -n "$START_DATE" ]]; then
          CMD="$CMD --start-date $START_DATE"
        fi
        if [[ -n "${{ inputs.end_date }}" ]]; then
          CMD="$CMD --end-date ${{ inputs.end_date }}"
        elif [[ -n "$END_DATE" ]]; then
          CMD="$CMD --end-date $END_DATE"
        fi
        if [[ -n "${{ inputs.max_herds }}" ]]; then
          CMD="$CMD --limit-total-herds ${{ inputs.max_herds }}"
        fi
        if [[ -n "${{ inputs.limit_herds_per_species }}" ]]; then
          CMD="$CMD --limit-herds-per-species ${{ inputs.limit_herds_per_species }}"
        fi
        if [[ -n "${{ inputs.species_codes }}" ]]; then
          CMD="$CMD --test-species-codes ${{ inputs.species_codes }}"
        fi
        
        # Note: test_mode is not directly used by the script, handled elsewhere if needed.
        
        echo "--- DEBUG: Checking environment variables ---"
        echo "GCS_BUCKET:"
        printenv | grep GCS_BUCKET || echo "GCS_BUCKET not found"
        echo "GOOGLE_CLOUD_PROJECT:"
        printenv | grep GOOGLE_CLOUD_PROJECT || echo "GOOGLE_CLOUD_PROJECT not found"
        echo "--- END DEBUG ---"

        echo "Running command: $CMD"
        $CMD

    - name: Handle pipeline failure
      if: failure()
      run: |
        STEP="${{ inputs.step || 'all' }}"
        echo "Pipeline step '$STEP' failed. Please check the logs above for details."
        exit 1